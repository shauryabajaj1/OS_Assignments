Group Number : 94
Group Members : Nishchay Yadav (2022332)
		Shaurya Bajaj  (2022474)
		
Group Participation: 
		Shaurya Bajaj : Helped in Implementation of following steps
				a) Use the “open” system call to get the file descriptor for the input binary and “read” system call to read
				the content of the binary into a heap allocated memory of appropriate size. Use malloc to allocate
				space for copying content of the binary.
				b) Iterate through the PHDR table and find the section of PT_LOAD (p_type) type that contains the
				address of the entrypoint method in fib.c
				c) Allocate memory of the size “p_memsz” using mmap function as shown below and then copy the
				segment content.
				
		Nishchay Yadav : Took further from here and helped out with
				 d) Navigate to the entrypoint address (e_entrypoint) into the segment loaded in the memory in above
				step. The entrypoint address may not be the starting address in that segment indicated by “p_vaddr”.
				You have to walk that segment to reach the virtual address referred by “e_entrypoint”.
				e) Once you reach that location, simply typecast the address to that of function pointer matching “_start”
				method in fib.c.
				f) Call the “_start” method and print the value returned from the “_start”.
				As mentioned in the Lecture-03 slides, the above steps will work only with statically linked executable file that
				has to be loaded and executed. The lib_simpleloader.so is the shared library implementation of loader.c file.
				4. Implementation of Launcher (“launch.c)
				The job of the launch.c is to a) ask the user to provide the ELF file as a command line argument, b) carry out
				necessary checks on the input ELF file, c) passing it to the loader for carrying out the loading/execution, and d)
				invoke the cleanup routine inside the loader. The launcher.c has to include “loader.h” containing the
				declarations of the two APIs used in step-c and step-d mentioned above. Note that to compile launch.c you
				must include the path to the lib_simpleloader.so (“bin” folder) and also supply the library name as a parameter
				to the gcc. Also, note that you don’t need to recompile launch.c and loader.c every time you want to load a new
				executable. However, the test case must be compiled if its executable doesn’t exist, or if there are any new
				changes inside the test case since the last compilation.
				
				
